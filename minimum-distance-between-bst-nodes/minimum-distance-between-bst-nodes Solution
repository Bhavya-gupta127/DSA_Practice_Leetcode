/**
  * Definition for a binary tree node.
  * struct TreeNode {
  *     int val;
  *     TreeNode *left;
  *     TreeNode *right;
  *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
  *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
  *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
  * };
  */ 
 class   Solution   { 
 public : 
      void   solve ( TreeNode *  root , int   & res , int   & pre ) 
      { 
          if ( root == NULL ) 
              return   ; 
          solve ( root -> left , res , pre ) ; 
          if ( pre != - 1 ) 
          { 
             res = min ( res , root -> val - pre ) ; 
          } 
         pre = root -> val ; 
          solve ( root -> right , res , pre ) ; 
      } 
      int   minDiffInBST ( TreeNode *  root )   { 
 
          int  res = 1e9 , pre = - 1 ; 
          solve ( root , res , pre ) ; 
          return  res ; 
      } 
 
      //m1 brute force 
 
      // vector<int>v; 
      // void inorder(TreeNode * root) 
      // { 
      //     if(root==NULL) 
      //         return ; 
      //     inorder(root->left); 
      //     v.push_back(root->val); 
      //     inorder(root->right); 
      // } 
      // int minDiffInBST(TreeNode* root) { 
      //     //brute force 
      //     inorder(root); 
      //     int ans=1e9; 
      //     for(auto i:v) 
      //         cout<<i<<" "; 
      //     for(int i=0;i<v.size()-1;i++) 
      //         ans=min(ans,v[i+1]-v[i]); 
      //     return ans; 
      // } 
 } ;