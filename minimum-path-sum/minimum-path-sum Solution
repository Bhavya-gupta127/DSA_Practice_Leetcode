class   Solution   { 
 public : 
      int   solve ( int  i , int  j , vector < vector < int >> & grid , vector < vector < int >> & dp ) 
      { 
          if ( i == grid . size ( ) - 1   &&  j == grid [ 0 ] . size ( ) - 1 ) 
              return  grid [ i ] [ j ] ; 
          if ( i >= grid . size ( )   ||  j >= grid [ 0 ] . size ( ) ) 
              return   1e4 ; 
          if ( dp [ i ] [ j ] != - 1 ) 
              return  dp [ i ] [ j ] ; 
          int  down = solve ( i + 1 , j , grid , dp ) + grid [ i ] [ j ] ; 
          int  right = solve ( i , j + 1 , grid , dp ) + grid [ i ] [ j ] ; 
          return  dp [ i ] [ j ] = min ( down , right ) ; 
      } 
      int   minPathSum ( vector < vector < int >> &  grid )   { 
          int  n = grid . size ( ) ; 
          int  m = grid [ 0 ] . size ( ) ; 
         vector < vector < int >> dp ( n , vector < int > ( m , - 1 ) ) ; 
          return   solve ( 0 , 0 , grid , dp ) ; 
      } 
 } ;