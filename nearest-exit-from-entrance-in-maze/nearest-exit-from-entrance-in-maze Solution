class   Solution   { 
 public : 
      int   nearestExit ( vector < vector < char >> &  maze ,  vector < int > &  entrance )   { 
         queue < vector < int >> q ; 
         q . push ( { entrance [ 0 ] , entrance [ 1 ] , 0 } ) ; 
         vector < vector < int >> vis ( maze . size ( ) , vector < int > ( maze [ 0 ] . size ( ) , 0 ) ) ; 
         vector < int > delrow = { 0 , 0 , 1 , - 1 } ; 
         vector < int > delcol = { 1 , - 1 , 0 , 0 } ; 
          while ( ! q . empty ( ) ) 
          { 
              int  i = q . front ( ) [ 0 ] ; 
              int  j = q . front ( ) [ 1 ] ; 
              int  d = q . front ( ) [ 2 ] ; 
             q . pop ( ) ; 
             vis [ i ] [ j ] = 1 ; 
              for ( int  x = 0 ; x < 4 ; x ++ ) 
              { 
                  int  r = i + delrow [ x ] ; 
                  int  c = j + delcol [ x ] ; 
                  if ( r >= 0   &&  c >= 0   &&  r < maze . size ( )   &&  c < maze [ 0 ] . size ( ) )  
                  { 
                      if ( vis [ r ] [ c ] != 1   &&  maze [ r ] [ c ] == '.' ) 
                      { 
                         vis [ r ] [ c ] = 1 ; 
                         q . push ( { r , c , d + 1 } ) ; 
                      } 
                  } 
                  else   if ( ! ( i == entrance [ 0 ]   &&  j == entrance [ 1 ] ) ) 
                      return  d ; 
              } 
          } 
          return   - 1 ; 
      } 
 } ;