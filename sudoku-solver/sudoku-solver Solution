class   Solution   { 
 public : 
      bool   isSafe ( int  row , int  col , int  i , vector < vector < char >> &  board ) 
      { 
          //row && col since sq 
          int  n = board . size ( ) ; 
          int  sizeOfBox = 3 ; 
          for ( int  j = 0 ; j < n ; j ++ ) 
          { 
              if ( board [ row ] [ j ] == i + '0'   ||  board [ j ] [ col ] == i + '0' ) 
                  return   false ; 
          } 
          int  startColOfBox  =  col  -  col  %  sizeOfBox ; 
          int  startRowOfBox  =  row  -  row  %  sizeOfBox ; 
          for ( int  j = startRowOfBox ; j < startRowOfBox + sizeOfBox ; j ++ ) 
          { 
              for ( int  k = startColOfBox ; k < startColOfBox + sizeOfBox ; k ++ ) 
                  if ( board [ j ] [ k ] == i + '0' ) 
                      return   false ; 
          } 
          return   true ; 
         
      } 
     pair < int , int >   findNextEmptyCell ( int  row , int  col , vector < vector < char >> &  board ) 
      { 
          int  i = row + 1 ; 
          while ( col < board [ 0 ] . size ( ) ) 
          { 
              while ( i < board . size ( ) ) 
              { 
                  if ( board [ i ] [ col ] == '.' ) 
                      return   { i , col } ; 
                 i ++ ; 
              } 
             i = 0 ; 
             col ++ ; 
          } 
          return   { - 1 , - 1 } ; 
      } 
      bool   fillBoard ( int  row , int  col , vector < vector < char >> &  board ) 
      { 
          if ( row == - 1   &&  col == - 1 ) 
          { 
              for ( auto  i : board ) 
              { 
                  for ( auto  j : i ) 
                     cout << j << " " ; 
                 cout << "\n" ; 
              } 
              return   true ; 
          } 
         pair < int , int > nextCell = findNextEmptyCell ( row , col , board ) ; 
          int  nextRow = nextCell . first , nextCol = nextCell . second ; 
          for ( int  i = 1 ; i <= 9 ; i ++ ) 
          { 
              if ( isSafe ( row , col , i , board ) ) 
              { 
                 board [ row ] [ col ] = i + '0' ; 
                  bool  flag = fillBoard ( nextRow , nextCol , board ) ; 
                  if ( flag ) 
                      return   true ; 
                 board [ row ] [ col ] = '.' ; 
              } 
          } 
          return   false ; 
      } 
      void   solveSudoku ( vector < vector < char >> &  board )   { 
          //recursive function to fill board 
         pair < int , int > nextCell = findNextEmptyCell ( - 1 , 0 , board ) ; 
          int  row = nextCell . first , col = nextCell . second ; 
          fillBoard ( row , col , board ) ; 
      } 
 } ;