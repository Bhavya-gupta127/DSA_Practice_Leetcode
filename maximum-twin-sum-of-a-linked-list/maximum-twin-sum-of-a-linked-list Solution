/**
  * Definition for singly-linked list.
  * struct ListNode {
  *     int val;
  *     ListNode *next;
  *     ListNode() : val(0), next(nullptr) {}
  *     ListNode(int x) : val(x), next(nullptr) {}
  *     ListNode(int x, ListNode *next) : val(x), next(next) {}
  * };
  */ 
 class   Solution   { 
 public : 
     ListNode *   reverse ( ListNode *  head , ListNode *  end ) 
      { 
          if ( head == NULL ) 
              return  head ; 
         ListNode *  newhead = end ; 
         
          while ( head != end ) 
          { 
             ListNode *  temp = head -> next ;   //3  
             head -> next = newhead ; 
             newhead = head ; 
             head = temp ; 
          } 
          return  newhead ; 
      } 
      int   pairSum ( ListNode *  head )   { 
          if ( head == NULL ) 
              return   0 ; 
         ListNode *  slow = head , * fast = head ; 
          while ( fast != NULL   &&  fast -> next != NULL ) 
          { 
             slow = slow -> next ; 
             fast = fast -> next -> next ; 
          } 
         fast = slow ; 
         slow = reverse ( head , slow ) ;   //reverse first half of linkedlist 
          // while(slow!=NULL) 
          // { 
          //     cout<<slow->val<<" "; 
          //     slow=slow->next; 
          // } 
          int  ans = 0 ; 
          while ( fast != NULL   &&  slow != NULL ) 
          { 
             ans = max ( ans , slow -> val + fast -> val ) ; 
             slow = slow -> next ; 
             fast = fast -> next ; 
          } 
          return  ans ; 
        
      } 
 } ;