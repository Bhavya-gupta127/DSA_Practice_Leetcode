class   Solution   { 
  public : 
     vector < vector < int >>  adjList ; 
      int   dfs ( vector < bool > &  hasApple , int  node , int  d , int  prev ) 
      { 
          int  result = 0 , temp ; 
          for ( int   & i : adjList [ node ] ) 
 	     if ( i != prev ) 
 	     { 
 	        temp = dfs ( hasApple , i , d + 1 , node ) ; 
 	         if ( temp )  result += temp - d ; 
 	     } 
          return  result || hasApple [ node ] ? result + d : 0 ;  
         
      } 
      int   minTime ( int  n ,  vector < vector < int >> &  edges ,  vector < bool > &  hasApple )  
      { 
         adjList . resize ( n ) ; 
          for ( vector < int >   & e : edges ) 
             adjList [ e [ 0 ] ] . push_back ( e [ 1 ] ) , adjList [ e [ 1 ] ] . push_back ( e [ 0 ] ) ; 
          return   dfs ( hasApple , 0 , 0 , - 1 ) * 2 ; 
      } 
  } ; 
  // class Solution { 
  // public: 
  //     struct node{ 
  //         int val; 
  //         node* left; 
  //         node* right; 
  //         node* up; 
  //         bool hasApple; 
  //         node(int value) 
  //         { 
  //             val=value; 
  //             up=NULL; 
  //             left=NULL; 
  //             right=NULL; 
  //             hasApple=false; 
  //         } 
  //         node(int value,node* parent) 
  //         { 
  //             val=value; 
  //             up=parent; 
  //             left=NULL; 
  //             right=NULL; 
  //             hasApple=false; 
  //         } 
  //         node(int value,node* parent, node* l, node* r) 
  //         { 
  //             val=value; 
  //             up=parent; 
  //             left=l; 
  //             right=r; 
  //             hasApple=false; 
  //         } 
         
  //     }; 
  //     int minTime(int n, vector<vector<int>>& edges, vector<bool>& hasApple) { 
  //         sort(edges.begin(),edges.end()); 
  //         for(int i=0;i<edges.size();i++) 
  //         { 
  //             queue<int>q; 
  //             q.push(edges[i][0]); 
             
  //         } 
  //         // node *root=new node(0); 
  //         // root->left=new node(1,root); 
  //         // cout<<root->val<<" "<<root->left->val<<"\n"; 
  //         return 1; 
  //     } 
  // };