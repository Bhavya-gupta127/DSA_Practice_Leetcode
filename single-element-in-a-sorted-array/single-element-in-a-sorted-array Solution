class   Solution   { 
 public : 
      int   singleNonDuplicate ( vector < int > &  nums )   { 
         
          int  high = nums . size ( ) - 1 ; 
          int  low = 0 ; 
          int  mid ; 
          if ( nums . size ( ) == 1   ||  nums [ 0 ] != nums [ 1 ] ) 
              return  nums [ 0 ] ; 
         
          while ( low <= high ) 
          { 
             mid = ( high + low ) / 2 ; 
              if ( mid != 0   &&  nums [ mid ] != nums [ mid - 1 ]   &&  nums [ mid ] != nums [ mid + 1 ] ) 
                  return  nums [ mid ] ; 
             
              if ( nums [ mid ] == nums [ mid + 1 ]   &&  mid % 2 == 0 ) 
                 low = mid + 1 ; 
              else   if ( nums [ mid ] == nums [ mid + 1 ]   &&  mid % 2 == 1 ) 
                 high = mid - 1 ; 
              else   if ( nums [ mid ] != nums [ mid + 1 ]   &&  mid % 2 == 1    ) 
                 low = mid + 1 ; 
              else   if ( nums [ mid ] != nums [ mid + 1 ]   &&  mid % 2 == 0    ) 
                 high = mid - 1 ; 
          } 
          return   - 1 ; 
      } 
 } ;