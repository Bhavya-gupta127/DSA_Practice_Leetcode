int   solve ( string  & a , string  & b , vector < vector < int >> & dp , int  n , int  m ) { 
 
      if ( n == 0   or  m == 0 )   return   0 ; 
      if ( dp [ n ] [ m ] != - 1 )   return  dp [ n ] [ m ] ; 
 
      if ( a [ n - 1 ] == b [ m - 1 ] ) { 
         dp [ n ] [ m ] = 1 + solve ( a , b , dp , n - 1 , m - 1 ) ; 
      } 
 
      else  dp [ n ] [ m ] = max ( solve ( a , b , dp , n - 1 , m ) , solve ( a , b , dp , n , m - 1 ) ) ; 
 
      return  dp [ n ] [ m ] ; 
 
 } 
 int   findLength ( vector < int > &  nums1 ,  vector < int > &  nums2 )   { 
 
     string a = "" , b = "" ; 
      for ( auto  i : nums1 ) { 
         a += to_string ( i ) ; 
      }  
     
      for ( auto  i : nums2 ) { 
         b += to_string ( i ) ; 
      }  
 
      int  n  =  a . size ( ) ; 
      int  m  =  b . size ( ) ; 
     vector < vector < int >> dp ( n + 1 , vector < int > ( m + 1 , - 1 ) ) ; 
      // cout<<a<<" "<<b; 
      return   solve ( a , b , dp , n , m ) ; 
 
      return   0 ; 
 } } ;