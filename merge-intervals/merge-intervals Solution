class   Solution   { 
 public : 
     vector < vector < int >>   merge ( vector < vector < int >> &  intervals )   { 
         
         vector < vector < int >>  ans ; 
          sort ( intervals . begin ( ) ,  intervals . end ( ) ) ; 
         
          int  i = 0 ; 
          int  start = 0 ; 
          int  end = 1 ; 
         
         
          for ( i = 0 ; i < intervals . size ( ) ; i ++ ) 
          { 
              if ( ans . empty ( )   ||  ans [ ans . size ( ) - 1 ] [ end ] < intervals [ i ] [ start ]   ) 
              { 
                 ans . push_back ( intervals [ i ] ) ; 
              } 
              else 
              { 
                 ans [ ans . size ( ) - 1 ] [ end ] = max ( ans [ ans . size ( ) - 1 ] [ end ] , intervals [ i ] [ end ] ) ; 
              } 
          } 
         
          return  ans ; 
         
 //         while() 
 //         { 
             
 //             if(endi>=intervals[j][start]) 
 //             { 
 //                 endi=max(endi,intervals[j][end]); 
 //                 i++; 
 //             } 
 //             else 
 //             { 
 //                 //found 1st interval 
 //                 //add in vector ans 
                 
                 
                 
                 
 //                 endi=intervals[i+1][end]; 
                 
 //             } 
 //             j++; 
 //         } 
         
 //         return ans; 
      } 
 } ;