/**
  * Definition for a binary tree node.
  * struct TreeNode {
  *     int val;
  *     TreeNode *left;
  *     TreeNode *right;
  *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
  *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
  *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
  * };
  */ 
 class   Solution   { 
 public : 
      int   widthOfBinaryTree ( TreeNode *  root )   { 
          // bfs 
          // left   => 2i+1 
          // right  => 2i+2 
          int  ans = 0 ; 
         queue < pair < TreeNode * , long   long >> q ; 
         q . push ( { root , 0 } ) ; 
         vector < vector < int >> res ; 
          while ( ! q . empty ( ) ) 
          { 
             vector < int > v ; 
              int  size = q . size ( ) ; 
              long   long   mini = q . front ( ) . second ; 
              for ( int  i = 0 ; i < size ; i ++ ) 
              { 
                 TreeNode *  temp = q . front ( ) . first ; 
                  long   long  cur = q . front ( ) . second - mini ; 
                 q . pop ( ) ; 
                 v . push_back ( cur ) ; 
                  if ( temp -> left != NULL ) 
                     q . push ( { temp -> left , 2 * cur + 1 } ) ; 
 
                  if ( temp != NULL   &&  temp -> right != NULL ) 
                     q . push ( { temp -> right , 2 * cur + 2 } ) ; 
                 
              } 
             res . push_back ( v ) ; 
              sort ( v . begin ( ) , v . end ( ) ) ; 
             ans = max ( ans , v [ v . size ( ) - 1 ] - v [ 0 ] + 1 ) ; 
 
          } 
          return  ans ; 
      } 
 } ;