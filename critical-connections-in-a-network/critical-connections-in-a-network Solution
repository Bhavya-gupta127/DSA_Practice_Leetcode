class   Solution   { 
 private : 
      int  timer = 1 ; 
 private : 
      void   dfs ( int  node , int  parent , vector < vector < int >> & adj , vector < int > & vis , 
     vector < int > & tin , vector < int > & low , vector < vector < int >> & bridges ) 
      { 
         tin [ node ] = timer ; 
         low [ node ] = timer ++ ; 
         vis [ node ] = 1 ; 
          for ( auto  i : adj [ node ] ) 
          { 
              if ( i == parent ) 
                  continue ; 
              if ( vis [ i ] != 1 ) 
              { 
                  dfs ( i , node , adj , vis , tin , low , bridges ) ; 
                 low [ node ] = min ( low [ node ] , low [ i ] ) ; 
                  //check for bridge 
                  if ( low [ i ] > tin [ node ] ) 
                     bridges . push_back ( { node , i } ) ; 
              } 
              else 
              { 
                 low [ node ] = min ( low [ node ] , low [ i ] ) ; 
              } 
          } 
      } 
 public : 
 
     vector < vector < int >>   criticalConnections ( int  n ,  vector < vector < int >> &  connections )   { 
         vector < vector < int >> adj ( n ) ; 
          for ( auto  i : connections ) 
          { 
             adj [ i [ 0 ] ] . push_back ( i [ 1 ] ) ; 
             adj [ i [ 1 ] ] . push_back ( i [ 0 ] ) ; 
          } 
         vector < int > tin ( n ) ; 
         vector < int > low ( n ) ; 
         vector < int > vis ( n , 0 ) ; 
         vector < vector < int >> bridges ; 
          dfs ( 0 , - 1 , adj , vis , tin , low , bridges ) ; 
          return  bridges ; 
      } 
 } ;