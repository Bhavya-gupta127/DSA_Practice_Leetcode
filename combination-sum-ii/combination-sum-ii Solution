class   Solution   { 
 public : 
      void   solve ( int  i , vector < int > & candidates , int  target , vector < vector < int >> & ans , vector < int > & v ) 
      { 
         
          if ( i == candidates . size ( )   ||  target <= 0 )     
          { 
              if ( target == 0 ) 
                 ans . push_back ( v ) ; 
              return ; 
          } 
          for ( int  ind = i ; ind < candidates . size ( ) ; ind ++ ) 
          { 
              if ( ind > i  &&  candidates [ ind ] == candidates [ ind - 1 ] ) 
                  continue ; 
             v . push_back ( candidates [ ind ] ) ; 
              solve ( ind + 1 , candidates , target - candidates [ ind ] , ans , v ) ; 
             v . pop_back ( ) ; 
          } 
      } 
     vector < vector < int >>   combinationSum2 ( vector < int > &  candidates ,   int  target )   { 
         vector < vector < int >> ans ; 
         vector < int > v ; 
          sort ( candidates . begin ( ) , candidates . end ( ) ) ; 
          solve ( 0 , candidates , target , ans , v ) ; 
          // vector<vector<int>>res(ans.begin(),ans.end()); 
          return  ans ; 
      } 
 } ;