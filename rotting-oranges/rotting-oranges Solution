class   Solution   { 
 public : 
      int   orangesRotting ( vector < vector < int >> &  grid )   { 
         vector < int > delrow = { - 1 , 0 , 0 , 1 } ; 
         vector < int > delcol = { 0 , 1 , - 1 , 0 } ; 
         queue < vector < int >> q ; 
          for ( int  i = 0 ; i < grid . size ( ) ; i ++ ) 
              for ( int  j = 0 ; j < grid [ 0 ] . size ( ) ; j ++ ) 
                  if ( grid [ i ] [ j ] == 2 ) 
                     q . push ( { i , j , 0 } ) ; 
 
          int  ans = 0 ; 
          while ( ! q . empty ( ) ) 
          { 
              int  i = q . front ( ) [ 0 ] ; 
              int  j = q . front ( ) [ 1 ] ; 
              int  t = q . front ( ) [ 2 ] ; 
             q . pop ( ) ; 
 
              for ( int  k = 0 ; k < 4 ; k ++ ) 
              { 
                  int  r = i + delrow [ k ] ; 
                  int  c = j + delcol [ k ] ; 
                  if ( r >= 0   &&  r < grid . size ( )   &&  c >= 0   &&  c < grid [ 0 ] . size ( )   &&  grid [ r ] [ c ] == 1 ) 
                  { 
                     grid [ r ] [ c ] = 2 ; 
                     q . push ( { r , c , t + 1 } ) ; 
                     ans = max ( ans , t + 1 ) ; 
                  } 
              } 
          } 
          for ( auto  i : grid ) 
              for ( auto  j : i ) 
                  if ( j == 1 ) 
                      return   - 1 ; 
          return  ans ; 
      } 
 } ;