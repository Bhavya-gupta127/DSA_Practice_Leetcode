class   Solution   { 
 public : 
      int   solve ( int  i , int  j , vector < vector < int >> &  grid , vector < vector < long   long >> & v , vector < vector < long   long >> & dp ) 
      { 
          if ( i == grid . size ( ) - 1   &&  j == grid [ 0 ] . size ( ) - 1 ) 
              return   1 ; 
          else   if ( i >= grid . size ( )   ||  j >= grid [ 0 ] . size ( )   ||  grid [ i ] [ j ] == 0 ) 
              return   0 ; 
          if ( dp [ i ] [ j ] != - 1 ) 
          { 
             v [ i ] [ j ] += dp [ i ] [ j ] ; 
              return  dp [ i ] [ j ] ; 
          } 
          long   long  right = 0 ; 
          long   long  down = 0 ; 
         grid [ i ] [ j ] = 0 ; 
         right = solve ( i , j + 1 , grid , v , dp ) ; 
          if ( right ) 
             v [ i ] [ j ] += right ; 
         down = solve ( i + 1 , j , grid , v , dp ) ; 
          if ( down ) 
             v [ i ] [ j ] += down ; 
         grid [ i ] [ j ] = 1 ; 
          return  dp [ i ] [ j ] = right + down ; 
      } 
      int   solve2 ( int  i , int  j , vector < vector < int >> &  grid , vector < vector < long   long >> & dp ) 
      {   
          if ( i == 0   &&  j == 0 ) 
              return   1 ; 
          else   if ( i < 0   ||  j < 0   ||  grid [ i ] [ j ] == 0 ) 
              return   0 ; 
          if ( dp [ i ] [ j ] != - 1 ) 
          { 
              // v[i][j]+=dp[i][j]; 
              return  dp [ i ] [ j ] ; 
          } 
          long   long  right = 0 ; 
          long   long  down = 0 ; 
         grid [ i ] [ j ] = 0 ; 
         right = solve2 ( i , j - 1 , grid , dp ) ; 
          // if(right) 
              // v[i][j]+=right; 
         down = solve2 ( i - 1 , j , grid , dp ) ; 
          // if(down) 
              // v[i][j]+=down; 
         grid [ i ] [ j ] = 1 ; 
          return  dp [ i ] [ j ] = right + down ; 
      } 
      bool   isPossibleToCutPath ( vector < vector < int >> &  grid )   { 
         vector < vector < long   long >> v ( grid . size ( ) , vector < long   long > ( grid [ 0 ] . size ( ) , 0 ) ) ; 
         vector < vector < long   long >> dp ( grid . size ( ) , vector < long   long > ( grid [ 0 ] . size ( ) , - 1 ) ) ; 
          long   long  n = solve ( 0 , 0 , grid , v , dp ) ; 
         vector < vector < long   long >> dp2 ( grid . size ( ) , vector < long   long > ( grid [ 0 ] . size ( ) , - 1 ) ) ; 
          solve2 ( grid . size ( ) - 1 , grid [ 0 ] . size ( ) - 1 , grid , dp2 ) ; 
          for ( int  i = 0 ; i < dp2 . size ( ) ; i ++ ) 
          { 
              for ( int  j = 0 ; j < dp2 [ 0 ] . size ( ) ; j ++ ) 
              { 
                  // cout<<dp2[i][j]<<" "; 
                  if ( i == 0   &&  j == 0 ) 
                      continue ; 
                  if ( i == dp2 . size ( ) - 1   &&  j == dp2 [ 0 ] . size ( ) - 1 ) 
                      continue ; 
                  if ( dp2 [ i ] [ j ] == n  ||  v [ i ] [ j ] == n ) 
                      return   true ; 
              } 
              // cout<<"\n"; 
          } 
     
         
          return   false ; 
      } 
 } ;