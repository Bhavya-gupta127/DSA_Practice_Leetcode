class   Solution   { 
 public : 
      // void bfs(int cur,vector<int>&vis,vector<vector<int>>&adj) 
      // { 
      //     queue<int>q; 
      //     q.push(cur); 
      //     vis[cur]=1; 
      //     while(!q.empty()) 
      //     { 
      //         int top=q.front(); 
      //         q.pop(); 
      //         for(auto &i:adj[top]) 
      //         { 
      //             q.push(i); 
      //             vis[i]=1; 
      //         } 
      //     } 
      // } 
      // vector<int> topoSort(vector<vector<int>>&adj) 
      // { 
      //     vector<int>indegree(adj.size()); 
      //     for(auto& i:adj) 
      //     { 
      //         for(auto j:i) 
      //         { 
      //             indegree[j]++; 
      //         } 
      //     } 
      //     queue<int>q; 
      //     for(int i=0;i<indegree.size();i++) 
      //     { 
      //         if(indegree[i]==0) 
      //             q.push(i); 
      //     } 
      //     vector<int>ans; 
      //     while(!q.empty()) 
      //     { 
      //         int cur=q.front(); 
      //         q.pop(); 
      //         ans.push_back(cur); 
      //         for(auto &i:adj[cur]) 
      //         { 
      //             indegree[i]--; 
      //             if(indegree[i]==0) 
      //                 q.push(i); 
      //         } 
      //     } 
      //     return ans; 
      // } 
     vector < int >   findSmallestSetOfVertices ( int  n ,  vector < vector < int >> &  edges )   { 
          //toposort 
          // 0 1 3 4 2 5 now similar count no. of island => bfs 
         vector < vector < int >> adj ( n ) ; 
          for ( auto   & i : edges ) 
             adj [ i [ 0 ] ] . push_back ( i [ 1 ] ) ; 
         vector < int > indegree ( adj . size ( ) ) ; 
          for ( auto &  i : adj ) 
          { 
              for ( auto  j : i ) 
                 indegree [ j ] ++ ; 
          } 
         vector < int > ans ; 
          for ( int  i = 0 ; i < indegree . size ( ) ; i ++ ) 
          { 
              if ( indegree [ i ] == 0 ) 
                 ans . push_back ( i ) ; 
          } 
          // vector<int>topo=topoSort(adj); 
          // // vector<int>topo={0,3,1,4,2,5}; 
          // vector<int>vis(n,0),ans; 
          // for(int i=0;i<n;i++) 
          // { 
          //     if(vis[topo[i]]!=1)    
          //     { 
          //         bfs(topo[i],vis,adj); 
          //         ans.push_back(topo[i]); 
          //     } 
          // } 
          return  ans ; 
      } 
 } ;