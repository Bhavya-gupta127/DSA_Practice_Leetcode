class   Solution   { 
 public : 
      int   solve ( int  i , int  j , string &  word1 , string &  word2 , vector < vector < int >> & dp ) 
      { 
          if ( j == word2 . size ( ) ) 
              return  word1 . size ( ) - i ; 
          if ( i == word1 . size ( ) ) 
              return  word2 . size ( ) - j ; 
          if ( dp [ i ] [ j ] != - 1 )             
              return  dp [ i ] [ j ] ; 
          int  ins = INT_MAX , del = INT_MAX , rep = INT_MAX , noOperation = INT_MAX ; 
          if ( word1 [ i ] == word2 [ j ] ) 
             noOperation = solve ( i + 1 , j + 1 , word1 , word2 , dp ) ; 
         ins = solve ( i , j + 1 , word1 , word2 , dp ) + 1 ; 
         del = solve ( i + 1 , j , word1 , word2 , dp ) + 1 ; 
         rep = solve ( i + 1 , j + 1 , word1 , word2 , dp ) + 1 ; 
          return  dp [ i ] [ j ] = min ( { ins , del , rep , noOperation } ) ; 
         
      } 
      int   minDistance ( string word1 ,  string word2 )   { 
         vector < vector < int >> dp ( word1 . size ( ) , vector < int > ( word2 . size ( ) , - 1 ) ) ; 
          return   solve ( 0 , 0 , word1 , word2 , dp ) ; 
      } 
 } ;