class   Solution   { 
  private : 
      bool   bfs ( int  node , vector < int > & color , vector < vector < int >> & graph ) 
      { 
         queue < int > q ; 
         q . push ( node ) ; 
         color [ node ] = 1 ; 
          while ( ! q . empty ( ) ) 
          { 
              int  cur = q . front ( ) ; 
             q . pop ( ) ; 
              for ( int  i = 0 ; i < graph [ cur ] . size ( ) ; i ++ ) 
              { 
                  if ( color [ graph [ cur ] [ i ] ] == 0 ) 
                  { 
                     color [ graph [ cur ] [ i ] ] = - 1 * color [ cur ] ; 
                     q . push ( graph [ cur ] [ i ] ) ; 
                  } 
                  else   if ( color [ graph [ cur ] [ i ] ] == color [ cur ] ) 
                      return   false ; 
              } 
 
          } 
          return   true ; 
      } 
  public : 
      bool   isBipartite ( vector < vector < int >> &  graph )   { 
          //use bfs and color vector 
 
         vector < int > color ( graph . size ( ) , 0 ) ; 
          for ( int  i = 0 ; i < graph . size ( ) ; i ++ ) 
          { 
              if ( color [ i ] == 0 ) 
              { 
                  if ( ! bfs ( i , color , graph ) ) 
                      return   false ; 
 
              } 
          } 
          return   true ; 
      } 
  } ;