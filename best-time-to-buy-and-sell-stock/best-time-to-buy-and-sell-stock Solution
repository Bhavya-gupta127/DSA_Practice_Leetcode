class   Solution   { 
 public : 
      int   maxProfit ( vector < int > &  prices )   { 
         
          //Method 1 is O(n^2) 2 for loop 
         
 //         reattempt 
         
          if ( prices . size ( ) == 0 ) 
              return   0 ; 
         
          int  ele = prices [ 0 ] ; 
          int  curmax = 0 ; 
          int  totalmax = 0 ; 
         
          for ( int  i = 0 ; i < prices . size ( ) ; i ++ ) 
          { 
              if ( prices [ i ] < ele ) 
              { 
                 ele = prices [ i ] ; 
                 curmax = 0 ; 
              } 
              else 
              { 
                 curmax = max ( curmax , prices [ i ] - ele ) ; 
                 totalmax = max ( totalmax , curmax ) ; 
              } 
          } 
          return  totalmax ; 
         
         
 //         accepted solution 1 
 //         int n=prices.size(); 
 //         int ans=0; 
 //         int curprofit=0; 
 //         int p=0,p1=0,p2=n-1; 
         
         
 //         int cursmall; 
 //         int curlarge; 
 //         vector <int> arr=prices; 
 //         sort(arr.begin(),arr.end()); 
 //         int max=arr[n-1]; 
 //         p=n-1; 
 //         // cout<<arr[p-1]<<"v "; 
 //         if(n==1) 
 //         { 
 //             return 0; 
 //         } 
 //         if(prices[0]<prices[1]) 
 //         { 
 //             cursmall=prices[0]; 
 //             curprofit=arr[p]-cursmall; 
 //             if(curprofit>ans) 
 //             { 
 //                 ans=curprofit; 
 //                 // cout<<"h"<<arr[p]; 
 //             } 
 
 //         } 
         
 //         for(int i=0;i<n-1;i++) 
 //         { 
 //             if(arr[p]==prices[i]) 
 //             { 
 //                 p--; 
 //             } 
 //             if(prices[i+1]<prices[i]) 
 //             { 
 //                 cursmall=prices[i+1]; 
 //                 curprofit=arr[p]-cursmall; 
 //                 if(curprofit>ans) 
 //                 { 
 //                     ans=curprofit; 
 //                     // cout<<"h"<<arr[p]; 
 //                 } 
                 
 //             } 
 //             else 
 //             { 
 //                 curprofit=arr[p]-prices[i]; 
 //                 if(curprofit>ans) 
 //                 { 
 //                     ans=curprofit; 
 //                     // cout<<"h"<<arr[p]; 
 //                 } 
 //             } 
             
 //         } 
 //         return ans; 
         
         
         
         
         
         
         
         
         
         
         
         
         
         
 //         while(p1<p2) 
 //         { 
 //                 if(prices[p1+1]<prices[p1]) 
 //                 { 
 //                     cursmall=min(prices[p1],cursmall); 
                     
 //                 } 
 //                 if(prices[p2-1]>prices[p2]) 
 //                 { 
 //                     curlarge=max(prices[p2-1],curlarge); 
 //                 } 
 //                 p1++; 
 //                 p2--; 
 //         } 
 //         return p2-p1; 
      } 
 } ;