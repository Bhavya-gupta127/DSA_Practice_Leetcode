/**
  * Definition for singly-linked list.
  * struct ListNode {
  *     int val;
  *     ListNode *next;
  *     ListNode() : val(0), next(nullptr) {}
  *     ListNode(int x) : val(x), next(nullptr) {}
  *     ListNode(int x, ListNode *next) : val(x), next(next) {}
  * };
  */ 
 /**
  * Definition for a binary tree node.
  * struct TreeNode {
  *     int val;
  *     TreeNode *left;
  *     TreeNode *right;
  *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
  *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
  *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
  * };
  */ 
 class   Solution   { 
 public : 
      // TreeNode * root=NULL; 
      // TreeNode* buildTree(int val) 
      // { 
      //     if(root==NULL) 
      //     { 
      //         root=new TreeNode(val); 
      //         return root; 
      //     } 
      //     if(val>root->val) 
      //     { 
      //         if(root->right!=NULL && root->right->val) 
      //         { 
 
      //         } 
      //         TreeNode* temp=root; 
      //         root=new TreeNode(val); 
      //         root->left=temp; 
      //     } 
 
      // } 
     TreeNode *   solve ( ListNode *  head , ListNode *  tail ) 
      { 
          if ( head == tail ) 
              return   NULL ; 
          if ( head -> next == tail ) 
          { 
             TreeNode *  temp =   new   TreeNode ( head -> val ) ; 
              // temp->left=new TreeNode(head->val); 
              return  temp ; 
          } 
          if ( head -> next -> next == tail ) 
          { 
             TreeNode *  temp =   new   TreeNode ( head -> next -> val ) ; 
             temp -> left = new   TreeNode ( head -> val ) ; 
              return  temp ; 
          } 
         
          //go to mid 
          auto  slow = head , fast = head , mid = head ; 
          while ( fast != tail  &&  fast -> next != tail ) 
          { 
             fast = fast -> next -> next ; 
             mid = slow ; 
             slow = slow -> next ; 
          } 
         TreeNode *  temp = new   TreeNode ( slow -> val ) ; 
         temp -> left = solve ( head , slow ) ; 
         temp -> right = solve ( slow -> next , tail ) ; 
          return  temp ; 
 
      } 
     TreeNode *   sortedListToBST ( ListNode *  head )   { 
          return   solve ( head , NULL ) ; 
      } 
 } ;