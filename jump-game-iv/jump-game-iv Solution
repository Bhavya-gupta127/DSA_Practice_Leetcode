class   Solution   { 
 public : 
      int   bfs ( vector < int > & arr ,  map < int , vector < int >> & mp ,  vector < int > & vis ) 
      { 
          //bfs 
         queue < int > q ; 
         q . push ( 0 ) ; 
         vis [ 0 ] = 1 ; 
          int  ans = 0 ; 
          while ( ! q . empty ( ) ) 
          { 
              int  s = q . size ( ) ; 
              while ( s -- ) 
              { 
                  int  x = q . front ( ) ; 
                  if ( x == arr . size ( ) - 1 ) 
                      return  ans ; 
                 q . pop ( ) ; 
                  if ( x != 0   &&  vis [ x - 1 ] != 1 ) 
                  { 
                     vis [ x - 1 ] = 1 ; 
                     q . push ( x - 1 ) ;    
                  } 
                  if ( vis [ x + 1 ] != 1 ) 
                  { 
                     vis [ x + 1 ] = 1 ; 
                     q . push ( x + 1 ) ;    
                  } 
                  for ( auto   & j : mp [ arr [ x ] ] ) 
                  { 
                      if ( vis [ j ] != 1 ) 
                      { 
                         vis [ j ] = 1 ; 
                         q . push ( j ) ; 
                      } 
                  } 
 
                 mp . erase ( arr [ x ] ) ;  
              } 
             ans ++ ; 
          } 
          return  ans ; 
 
      } 
      int   minJumps ( vector < int > &  arr )   { 
         map < int , vector < int >> mp ; 
          for ( int  i = 0 ; i < arr . size ( ) ; i ++ ) 
             mp [ arr [ i ] ] . push_back ( i ) ; 
         vector < int > vis ( arr . size ( ) , 0 ) ; 
         vector < int > dp ( arr . size ( ) , - 1 ) ; 
          //      for(auto i:mp) 
          // { 
          //     cout<<i.first<<" :"; 
          //     for(auto j:i.second) 
          //         cout<<j<<" "; 
          //     cout<<"\n"; 
          // } 
          return   bfs ( arr , mp , vis ) ; 
      } 
 } ;