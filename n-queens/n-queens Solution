class   Solution   { 
 public : 
      bool   isPossible ( int  row , int  col , vector < string > & board ) 
      { 
          int  n = board . size ( ) ; 
          // check vertically and horizonatally 
          //since sq board if can check horizontally in same loop 
          int  i , j ; 
          for ( j = 0 ; j < n ; j ++ ) 
          { 
              if ( board [ row ] [ j ] == 'Q'   ||  board [ j ] [ col ] == 'Q' ) 
                  return   false ; 
          } 
 
         i = row - 1 ; 
         j = col - 1 ; 
          while ( i >= 0   &&  j >= 0 ) 
          { 
              if ( board [ i -- ] [ j -- ] == 'Q' ) 
                  return   false ; 
          } 
         i = row + 1 ; 
         j = col - 1 ; 
          while ( i < n  &&  j >= 0 ) 
          { 
              if ( board [ i ++ ] [ j -- ] == 'Q' ) 
                  return   false ; 
          } 
         i = row - 1 ; 
         j = col + 1 ; 
          while ( i >= 0   &&  j < n ) 
          { 
              if ( board [ i -- ] [ j ++ ] == 'Q' ) 
                  return   false ; 
          } 
          return   true ; 
      } 
      void   recurFindBoard ( int  col , vector < string > & board , vector < vector < string >> & allBoards ) 
      { 
          //base case 
          if ( col >= board [ 0 ] . size ( ) ) 
          { 
             allBoards . push_back ( board ) ; 
              return ; 
          } 
          for ( int  row = 0 ; row < board . size ( ) ; row ++ ) 
          { 
 
              //Place queen if possible to place the queen at board[row][col] 
              if ( isPossible ( row , col , board ) ) 
              { 
                 board [ row ] [ col ] = 'Q' ; 
                  recurFindBoard ( col + 1 , board , allBoards ) ; 
                 board [ row ] [ col ] = '.' ; 
              } 
 
          } 
      } 
     vector < vector < string >>   solveNQueens ( int  n )   { 
         
          //creating the chess board 
         vector < string > board ( n ) ; 
         string s ; 
          for ( int  i = 0 ; i < n ; i ++ ) 
             s . push_back ( '.' ) ; 
          for ( int  i = 0 ; i < n ; i ++ ) 
             board [ i ] = s ; 
 
          //recursive function to find all possible boards 
         vector < vector < string >> allBoards ; 
          recurFindBoard ( 0 , board , allBoards ) ; 
          return  allBoards ; 
 
      } 
 } ;