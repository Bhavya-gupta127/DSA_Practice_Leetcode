class   Solution   { 
 public : 
     vector < int > delrow = { 0 , 0 , 1 , - 1 } ; 
     vector < int > delcol = { 1 , - 1 , 0 , 0 } ; 
      int  mod = 1e9 + 7 ; 
      int   solve ( int  i , int  j ,  vector < vector < int >> &  grid , vector < vector < int >> & vis , vector < vector < long   long >> & dp ) 
      { 
          if ( i >= grid . size ( )   ||  j >= grid [ 0 ] . size ( )   ||  i < 0   ||  j < 0 ) 
              return   0 ; 
          if ( dp [ i ] [ j ] != - 1 ) 
              return  dp [ i ] [ j ] ; 
          long   long  ans = 0 ; 
          for ( int  x = 0 ; x < 4 ; x ++ ) 
          { 
              int  r = i + delrow [ x ] ; 
              int  c = j + delcol [ x ] ; 
             
              if ( r >= 0   &&  r < grid . size ( )   &&  c >= 0   &&  c < grid [ 0 ] . size ( )   &&  vis [ r ] [ c ] != 1   &&  grid [ r ] [ c ] > grid [ i ] [ j ] ) 
              { 
                 vis [ r ] [ c ] = 1 ; 
                 ans += ( solve ( r , c , grid , vis , dp ) + 1 ) % mod ; 
                 vis [ r ] [ c ] = - 1 ; 
              } 
          } 
          return  dp [ i ] [ j ] = ans % mod ; 
      } 
      int   countPaths ( vector < vector < int >> &  grid )   { 
          int  n = grid . size ( ) , m = grid [ 0 ] . size ( ) ; 
         vector < vector < int >> vis ( n , vector < int > ( m , - 1 ) ) ; 
         vector < vector < long   long >> dp ( n , vector < long   long > ( m , - 1 ) ) ; 
          long   long  ans = 0 ; 
          for ( int  i = 0 ; i < n ; i ++ ) 
              for ( int  j = 0 ; j < m ; j ++ ) 
                 ans += solve ( i , j , grid , vis , dp ) % mod ; 
          return   ( ans + ( long   long ) ( n * m ) ) % mod ; 
      } 
 } ;