class   Solution   { 
 public : 
      bool   similar ( string a , string b ) 
      { 
         vector < int > v ; 
          for ( int  i = 0 ; i < a . size ( ) ; i ++ ) 
          { 
              int  temp = abs ( a [ i ] - b [ i ] ) ; 
              if ( temp ) 
                 v . push_back ( temp ) ; 
          } 
          if ( v . size ( ) == 0 ) 
              return   true ; 
          if ( v . size ( ) == 2   &&  v [ 0 ] == v [ 1 ] ) 
              return   true ; 
          return   false ; 
         
 
      } 
      void   bfs ( string s , unordered_map < string , vector < string >> & adj , unordered_map < string , int > & vis ) 
      { 
         queue < string > q ; 
         q . push ( s ) ; 
         vis [ s ] = 1 ; 
          while ( ! q . empty ( ) ) 
          { 
             string cur = q . front ( ) ; 
             q . pop ( ) ; 
              for ( auto   & i : adj [ cur ] ) 
              { 
                  if ( vis . count ( i ) == 0 ) 
                  { 
                     q . push ( i ) ; 
                     vis [ i ] = 1 ; 
                  } 
              } 
          } 
      } 
      int   numSimilarGroups ( vector < string > &  strs )   { 
         
         unordered_map < string , vector < string >> adj ; 
          for ( int  i = 0 ; i < strs . size ( ) ; i ++ ) 
          { 
              for ( int  j = i + 1 ; j < strs . size ( ) ; j ++ ) 
              { 
                  if ( similar ( strs [ i ] , strs [ j ] ) ) 
                  { 
                     adj [ strs [ i ] ] . push_back ( strs [ j ] ) ; 
                     adj [ strs [ j ] ] . push_back ( strs [ i ] ) ; 
                  } 
              } 
          } 
          int  ans = 0 ; 
         unordered_map < string , int > vis ; 
          for ( auto   & s : strs ) 
          { 
              if ( vis . count ( s ) == 0 ) 
              { 
                  bfs ( s , adj , vis ) ; 
                 ans ++ ; 
              } 
          } 
          return  ans ; 
      } 
 } ; 
