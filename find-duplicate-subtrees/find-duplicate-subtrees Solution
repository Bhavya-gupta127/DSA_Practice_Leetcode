/**
  * Definition for a binary tree node.
  * struct TreeNode {
  *     int val;
  *     TreeNode *left;
  *     TreeNode *right;
  *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
  *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
  *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
  * };
  */ 
 class   Solution   { 
 public : 
     string  findAllSubtrees ( TreeNode *  root , map < string , vector < TreeNode * >> & mp ) 
      { 
          if ( ! root ) 
              return   "#" ; 
         string s =   '('   +   to_string ( root -> val ) + findAllSubtrees ( root -> left , mp ) + findAllSubtrees ( root -> right , mp )   + ')' ; 
         mp [ s ] . push_back ( root ) ; 
          return  s ; 
      } 
     vector < TreeNode * >   findDuplicateSubtrees ( TreeNode *  root )   { 
         map < string , vector < TreeNode * >> mp ; 
          findAllSubtrees ( root , mp ) ; 
         vector < TreeNode * > ans ; 
          for ( auto  i : mp ) 
              if ( i . second . size ( ) > 1 ) 
                 ans . push_back ( i . second [ 0 ] ) ; 
          return  ans ; 
      } 
 } ;