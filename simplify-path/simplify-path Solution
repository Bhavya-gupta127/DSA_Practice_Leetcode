class   Solution   { 
 public : 
     string  simplifyPath ( string path )   { 
 
     stringstream  ss ( path ) ; 
     string s ; 
     vector < string > v ; 
      while   ( getline ( ss , s , '/' ) )   { 
          if ( s == ".."   &&   ! v . empty ( ) ) 
             v . pop_back ( ) ; 
          else   if ( ! s . empty ( )   &&  s != "."   &&  s != ".." ) 
             v . push_back ( s ) ; 
      } 
     string ans ; 
      for ( auto  i : v ) 
      { 
         ans += "/" ; 
         ans += i ; 
      } 
      if ( ans . empty ( ) ) 
          return   "/" ; 
      return  ans ; 
 
 
 
 
 
 
 
          // failed method 
 
 
          // string ans; 
          // for(int i=0;i<path.size();i++) 
          // { 
          //     int j=i; 
          //     while(j<path.size()) 
          //     { 
          //         if(path[j]!='.') 
          //             break; 
          //         j++; 
          //     } 
          //     if(ans.size()!=1 && path[i]=='/' && ans.back()=='/') 
          //         continue; 
          //     else if(path[i]=='.') 
          //     { 
          //         if(j-i>2) 
          //         { 
          //             for(int k=0;k<j-i;k++) 
          //                 ans.push_back('.'); 
          //             i=j-1; 
          //         } 
          //         else if(j-i==2) 
          //         { 
          //             int x=0; 
          //             while(x!=2 && !ans.empty()) 
          //             { 
          //                 if(ans.back()=='/') 
          //                     x++; 
          //                 ans.pop_back(); 
          //             } 
 
          //         } 
          //     } 
          //     else 
          //         ans.push_back(path[i]); 
          // } 
          // if(ans.back()=='/' && ans.size()!=1) 
          //     ans.pop_back(); 
          // if(ans.empty()) 
          //     return "/"; 
          // return ans; 
      } 
 } ;