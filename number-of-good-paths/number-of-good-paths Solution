// class Solution { 
 
 // public: 
 //     // int ans=0; 
 //     set<string>myset; 
 //     void dfs(int i,int start,vector<int>&vis,vector<int>&vals,vector<vector<int>>&adj,string s) 
 //     { 
 //         vis[i]=1; 
 //         s+=to_string(i); 
 //         if(vals[i]>start) 
 //             return; 
 //         if(vals[i]==start) 
 //         { 
 //             string path=s; 
 //             reverse(path.begin(),path.end()); 
 //             if(myset.find(path)==myset.end() && myset.find(s)==myset.end()) 
 //                 myset.insert(s); 
 //             // ans++; 
 //         } 
 //         for(auto x:adj[i]) 
 //             if(!vis[x]) 
 //                 dfs(x,start,vis,vals,adj,s); 
 
 //     } 
 //     int numberOfGoodPaths(vector<int>& vals, vector<vector<int>>& edges) { 
 //         int n=vals.size(); 
 //         vector<vector<int>>adj(n); 
 
 //         for(auto i:edges) 
 //         { 
 //             adj[i[0]].push_back(i[1]); 
 //             adj[i[1]].push_back(i[0]); 
 //         } 
 //         for(int i=0;i<n;i++) 
 //         { 
 //             vector<int>vis(n,0); 
 //             dfs(i,vals[i],vis,vals,adj,""); 
 //         } 
 //         for(auto i:myset) 
 //             cout<<i<<"\n"; 
 //         return myset.size(); 
 //     } 
 // }; 
 class   Solution   { 
 public : 
 	 int   find ( vector < int > &  y , int  i )   { 
 		 if ( i == y [ i ] )   return  i ; 
 		y [ i ] = find ( y , y [ i ] ) ; 
 		 return  y [ i ] ; 
 	 } 
 	 int   numberOfGoodPaths ( vector < int > &  vals ,  vector < vector < int >> &  edges )   { 
          int  n  =  vals . size ( ) , m = edges . size ( ) , ans = 0 ; 
 		vector < vector < int >>   x ( n ) ; 
 		vector < int >   y ( n ) ; 
 		 for ( int  i = 0 ; i < n ; i ++ ) { 
 			y [ i ] = i ; 
 			x [ i ] = { vals [ i ] , 1 } ; 
 		 } 
          sort ( edges . begin ( ) , edges . end ( ) , [ & ] ( vector < int > &  a , vector < int > &  b ) { 
 	    	 return   max ( vals [ a [ 0 ] ] , vals [ a [ 1 ] ] ) < max ( vals [ b [ 0 ] ] , vals [ b [ 1 ] ] ) ; 
 		 } ) ; 
 		 for ( int  i = 0 ; i < m ; i ++ ) { 
 			 int  a = find ( y , edges [ i ] [ 0 ] ) ; 
 			 int  b = find ( y , edges [ i ] [ 1 ] ) ; 
 			 if ( x [ a ] [ 0 ] != x [ b ] [ 0 ] ) { 
 				 if ( x [ a ] [ 0 ] > x [ b ] [ 0 ] )  y [ b ] = a ; 
 				 else  y [ a ] = b ; 
 			 } 
 			 else { 
 				y [ a ] = b ; 
 				ans += x [ a ] [ 1 ] * x [ b ] [ 1 ] ; 
 				x [ b ] [ 1 ] += x [ a ] [ 1 ] ; 
 			 } 
 		 } 
 		 return  ans + n ; 
 	 } 
 } ;