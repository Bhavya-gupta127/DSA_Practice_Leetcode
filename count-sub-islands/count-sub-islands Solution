class   Solution   { 
 public : 
      bool   dfs ( int  i , int  j , vector < vector < int >> & grid1 , vector < vector < int >> & grid2 ) 
      { 
          if ( i < 0   ||  j < 0   ||  i >= grid2 . size ( )   ||  j >= grid2 [ 0 ] . size ( )   ||  grid2 [ i ] [ j ] == 0 ) 
              return   true ; 
         grid2 [ i ] [ j ] = 0 ; 
          bool  a =   dfs ( i + 1 , j , grid1 , grid2 ) ; 
          bool  b =   dfs ( i - 1 , j , grid1 , grid2 ) ; 
          bool  c =   dfs ( i , j + 1 , grid1 , grid2 ) ; 
          bool  d =   dfs ( i , j - 1 , grid1 , grid2 ) ; 
          bool  ans = a && b && c && d ; 
          // cout<<":::::::"<<i<<" "<<j<<" "<<grid2[i][j]<<" "<<ans<<"\n"; 
          if ( grid1 [ i ] [ j ] == 0 ) 
              return   false ; 
          return  ans ; 
      } 
      int   countSubIslands ( vector < vector < int >> &  grid1 ,  vector < vector < int >> &  grid2 )   { 
          int  n = grid1 . size ( ) , m = grid1 [ 0 ] . size ( ) , ans = 0 ; 
          for ( int  i = 0 ; i < n ; i ++ ) 
          { 
              for ( int  j = 0 ; j < m ; j ++ ) 
              { 
                  if ( grid2 [ i ] [ j ] != 0   &&   dfs ( i , j , grid1 , grid2 ) ) 
                  { 
                      // cout<<"True : "<<i<<" "<<j<<"\n"; 
                     ans ++ ; 
                  } 
              } 
          } 
          return  ans ; 
      } 
 } ;