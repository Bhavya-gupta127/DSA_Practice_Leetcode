class   Solution   { 
 public : 
      bool   hasCycle ( int  node , vector < vector < int >> & adj , vector < int > & vis , vector < int > & pathvis ) 
      { 
         vis [ node ] = 1 ; 
         pathvis [ node ] = 1 ; 
          bool  ans = false ; 
          for ( auto   & i : adj [ node ] ) 
          { 
              if ( pathvis [ i ] == 1 ) 
                  return   true ; 
              if ( vis [ i ] != 1 ) 
                 ans = ans || hasCycle ( i , adj , vis , pathvis ) ; 
          } 
         pathvis [ node ] = 0 ; 
          return  ans ; 
      } 
      bool   canFinish ( int  numCourses ,  vector < vector < int >> &  prerequisites )   { 
         vector < vector < int >> adj ( numCourses + 2 ) ; 
          for ( auto   & i : prerequisites ) 
             adj [ i [ 1 ] ] . push_back ( i [ 0 ] ) ; 
         vector < int > vis ( numCourses + 2 , 0 ) ; 
         vector < int > pathvis ( numCourses + 2 , 0 ) ; 
          for ( int  i = 0 ; i <= numCourses ; i ++ ) 
          { 
              if ( vis [ i ] != 1   &&   hasCycle ( i , adj , vis , pathvis ) ) 
                  return   false ; 
          } 
          return   true ; 
      } 
 } ;