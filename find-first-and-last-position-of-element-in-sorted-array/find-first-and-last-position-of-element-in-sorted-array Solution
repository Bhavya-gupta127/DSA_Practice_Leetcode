class   Solution   { 
 public : 
     vector < int >   searchRange ( vector < int > &  nums ,   int  target )   { 
         
          //without using upper and lower bound 
         
          int  l = 0 ; 
          int  r = nums . size ( ) - 1 ; 
          int  mid ; 
         vector < int > ans ( 2 , - 1 ) ; 
         
          // for lower bound in logn 
          while ( l <= r ) 
          { 
             mid = ( l + r ) / 2 ; 
              if ( nums [ mid ] < target ) 
                 l = mid + 1 ; 
              else   if ( nums [ mid ] > target ) 
                 r = mid - 1 ; 
              else   if ( ( nums [ mid ] == target  &&  mid == 0 )   ||   ( mid != 0   &&  nums [ mid - 1 ] != target ) ) 
              { 
                ans [ 0 ] = mid ; 
                  break ; 
              } 
              else  
                 r = mid - 1 ; 
          } 
         
           // for upper bound in logn 
         l = 0 ; 
         r = nums . size ( ) - 1 ; 
          while ( l <= r ) 
          { 
             mid = ( l + r ) / 2 ; 
              if ( nums [ mid ] < target ) 
                 l = mid + 1 ; 
              else   if ( nums [ mid ] > target ) 
                 r = mid - 1 ; 
              else   if ( ( nums [ mid ] == target  &&  mid == nums . size ( ) - 1 )   ||   ( mid != nums . size ( ) - 1   &&  nums [ mid + 1 ] != target ) ) 
              { 
                ans [ 1 ] = mid ; 
                  break ; 
              } 
              else  
                 l = mid + 1 ; 
          } 
          return  ans ; 
         
      } 
 } ;