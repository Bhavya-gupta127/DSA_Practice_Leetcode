class   Solution   { 
 public : 
      void   dfs ( int  i , int  j , vector < vector < int >> & vis , vector < vector < char >> & board ) 
      { 
          if ( i >= board . size ( )   ||  i < 0   ||  j >= board [ 0 ] . size ( )   ||  j < 0   ||  board [ i ] [ j ] == 'X'   ||  vis [ i ] [ j ] == 1 ) { 
              return   ; 
          } 
         vis [ i ] [ j ] = 1 ; 
         vector < int > delrow = { 0 , 0 , 1 , - 1 } ; 
         vector < int > delcol = { - 1 , 1 , 0 , 0 } ; 
          for ( int  x = 0 ; x < 4 ; x ++ ) 
          { 
              int  r = i + delrow [ x ] ; 
              int  c = j + delcol [ x ] ; 
              dfs ( r , c , vis , board ) ; 
          } 
      } 
      void   solve ( vector < vector < char >> &  board )   { 
          // the only way a region of O is not surrounded by X is when one of the O is at the border  
          // we can use this intution to call dfs for all border O and mark them as visited  
          // now all the un visited regions can be assumed to be surrounded 
 
         vector < vector < int >> vis ( board . size ( ) , vector < int > ( board [ 0 ] . size ( ) , 0 ) ) ; 
          int  n = board . size ( ) ; 
          int  m = board [ 0 ] . size ( ) ; 
          for ( int  i = 0 ; i < n ; i ++ ) 
          { 
             
              if ( vis [ i ] [ 0 ] != 1 ) 
                  dfs ( i , 0 , vis , board ) ; 
              if ( vis [ i ] [ m - 1 ] != 1 ) 
                  dfs ( i , m - 1 , vis , board ) ; 
          } 
          for ( int  j = 0 ; j < m ; j ++ ) 
          { 
              if ( vis [ 0 ] [ j ] != 1 ) 
                  dfs ( 0 , j , vis , board ) ; 
              if ( vis [ n - 1 ] [ j ] != 1 ) 
                  dfs ( n - 1 , j , vis , board ) ; 
          } 
          for ( int  i = 0 ; i < n ; i ++ ) 
          { 
              for ( int  j = 0 ; j < m ; j ++ ) 
              { 
                  if ( vis [ i ] [ j ] == 1 ) 
                     board [ i ] [ j ] = 'O' ; 
                  else 
                     board [ i ] [ j ] = 'X' ; 
              } 
          } 
      } 
 } ;