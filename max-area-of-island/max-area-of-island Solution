class   Solution   { 
 public : 
      int   bfs ( int  i , int  j , vector < vector < int >> & grid , vector < vector < int >> & vis ) 
      { 
         vis [ i ] [ j ] = 1 ; 
         queue < pair < int , int >> q ; 
         q . push ( { i , j } ) ; 
          long   long  ans = 0 ; 
          while ( ! q . empty ( ) ) 
          { 
             ans ++ ; 
              int  r = q . front ( ) . first ; 
              int  c = q . front ( ) . second ; 
             q . pop ( ) ; 
             vector < int > delrow = { 1 , - 1 , 0 , 0 } ; 
             vector < int > delcol = { 0 , 0 , 1 , - 1 } ; 
              for ( int  x = 0 ; x < 4 ; x ++ ) 
              { 
                  int  row = r + delrow [ x ] ; 
                  int  col = c + delcol [ x ] ; 
                  if ( row >= 0   &&  col >= 0   &&  row < grid . size ( )   &&  col < grid [ 0 ] . size ( )   &&  vis [ row ] [ col ] != 1   &&  grid [ row ] [ col ] == 1 ) 
                  { 
                     vis [ row ] [ col ] = 1 ; 
                     q . push ( { row , col } ) ; 
                  } 
              } 
          } 
          return  ans ; 
      } 
      int   maxAreaOfIsland ( vector < vector < int >> &  grid )   { 
          int  ans = 0 ; 
         vector < vector < int >> vis ( grid . size ( ) , vector < int > ( grid [ 0 ] . size ( ) , 0 ) ) ; 
          for ( int  i = 0 ; i < grid . size ( ) ; i ++ ) 
          { 
              for ( int  j = 0 ; j < grid [ 0 ] . size ( ) ; j ++ ) 
              { 
                  if ( vis [ i ] [ j ] != 1   &&  grid [ i ] [ j ] == 1 ) 
                     ans = max ( ans , bfs ( i , j , grid , vis ) ) ; 
              } 
          } 
          return  ans ; 
      } 
 } ;