/*
 // Definition for a Node.
 class Node {
 public:
     int val;
     vector<Node*> neighbors;
     Node() {
         val = 0;
         neighbors = vector<Node*>();
     }
     Node(int _val) {
         val = _val;
         neighbors = vector<Node*>();
     }
     Node(int _val, vector<Node*> _neighbors) {
         val = _val;
         neighbors = _neighbors;
     }
 };
 */ 
 
 class   Solution   { 
 public : 
     Node *   dfs ( Node * node , map < int , Node * > & mp ) 
      { 
          if ( ! node ) 
              return  node ; 
         Node * ans = new   Node ( node -> val ) ; 
         mp [ node -> val ] = ans ; 
          for ( auto  i : node -> neighbors ) 
          { 
              if ( mp . count ( i -> val ) == 0 ) 
                 ans -> neighbors . push_back ( dfs ( i , mp ) ) ; 
              else 
                 ans -> neighbors . push_back ( mp [ i -> val ] ) ; 
          } 
          return  ans ; 
      } 
     Node *   cloneGraph ( Node *  node )   { 
          if ( ! node ) 
              return  node ; 
         map < int , Node * > mp ; 
          return   dfs ( node , mp ) ; 
      } 
 } ;