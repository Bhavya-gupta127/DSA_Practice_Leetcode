class   Solution   { 
 public : 
      bool   checkpalin ( string &  s , int  l , int  r ) 
      { 
          while ( l < r ) 
          { 
              if ( s [ l ++ ] != s [ r -- ] ) 
                  return   false ; 
          } 
          return   true ; 
      } 
     
      void   solve ( int  i , string s , string substr , vector < string > & v , vector < vector < string >> & ans ) 
      { 
          if ( i >= s . size ( ) ) 
          { 
             ans . push_back ( v ) ; 
              return ; 
          } 
          for ( int  j = i ; j < s . size ( ) ; j ++ ) 
          { 
              if ( checkpalin ( s , i , j ) ) 
              { 
                 substr = s . substr ( i , j - i + 1 ) ; 
                 v . push_back ( substr ) ; 
                  solve ( j + 1 , s , substr , v , ans ) ; 
                 v . pop_back ( ) ; 
              } 
          } 
      } 
     vector < vector < string >>   partition ( string s )   { 
         vector < vector < string >> ans ; 
         vector < string > v ; 
          solve ( 0 , s , "" , v , ans ) ; 
          return  ans ; 
      // solution 2 
      // while taking elements check if elements till now are palindrom then break and start new recursion 
         
       //intution 1 
      //  since the constraints say that length of s can be maximum 16 
      //  we can think of considering all possible substrings of string s  
      //  and add to vector<vector<string>> if it is a palindrome  
 
      //  talking about time complexity O(n/2) for checking for palindrome  
      } 
 } ;