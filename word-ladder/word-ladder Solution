class   Solution   { 
 public : 
      int   diff ( string  & s1 , string  & s2 ) 
      { 
          int  ans = 0 ; 
          for ( int  i = 0 ; i < s1 . size ( ) ; i ++ ) 
          { 
              if ( s1 [ i ] != s2 [ i ] ) 
                 ans ++ ; 
          } 
          return  ans ; 
      } 
      int   ladderLength ( string beginWord ,  string endWord ,  vector < string > &  wordList )   { 
         unordered_map < string , vector < string >> adj ; 
         wordList . push_back ( beginWord ) ; 
          for ( auto   & i : wordList ) 
          { 
              for ( auto   & j : wordList ) 
              { 
                  if ( i != j  &&   diff ( i , j ) == 1 ) 
                  { 
                     adj [ i ] . push_back ( j ) ; 
                  } 
              } 
          } 
         unordered_map < string , int > dis ; 
          for ( auto   & i : wordList ) 
             dis [ i ] = 1e9 ; 
         dis [ beginWord ] = 1 ; 
         dis [ endWord ] = 1e9 ; 
         unordered_map < string , int > vis ; 
         queue < string > q ; 
         q . push ( beginWord ) ; 
          while ( ! q . empty ( ) ) 
          { 
             string node = q . front ( ) ; 
             vis [ node ] = 1 ; 
             q . pop ( ) ; 
              for ( auto  i : adj [ node ] ) 
              { 
                  if ( vis . count ( i ) == 0 ) 
                  { 
                     q . push ( i ) ; 
                     dis [ i ] = min ( dis [ i ] , dis [ node ] + 1 ) ; 
                  } 
              } 
          } 
          // cout<<"adj lsit"<<"\n"; 
          // for(auto i:adj) 
          // { 
          //     cout<<i.first<<" : ";  
          //     for(auto j:i.second) 
          //         cout<<j<<" "; 
          //     cout<<"\n"; 
          // } 
          return  dis [ endWord ] == 1e9 ? 0 : dis [ endWord ] ; 
      } 
 } ;