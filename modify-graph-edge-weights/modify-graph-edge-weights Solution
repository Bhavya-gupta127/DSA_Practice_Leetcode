class   Solution   { 
 public : 
     vector < vector < int >>   modifiedGraphEdges ( int  n ,  vector < vector < int >> &  edges ,   int  s ,   int  d ,   int  target )   { 
         vector < vector < pair < int , int >> > adj ( n ) ; 
          for ( auto  i : edges ) 
          { 
              if ( i [ 2 ] != - 1 ) 
              { 
                 adj [ i [ 0 ] ] . push_back ( { i [ 1 ] , i [ 2 ] } ) ; 
                 adj [ i [ 1 ] ] . push_back ( { i [ 0 ] , i [ 2 ] } ) ;     
              } 
          } 
         vector < int > dist ( n , 1e9 ) ; 
         priority_queue < pair < int , int > , vector < pair < int , int >> , greater < pair < int , int >> > pq ; 
         pq . push ( { 0 , s } ) ; 
         dist [ s ] = 0 ; 
          while ( ! pq . empty ( ) ) 
          { 
              int  dis = pq . top ( ) . first ; 
              int  node = pq . top ( ) . second ; 
             pq . pop ( ) ; 
              for ( auto  it : adj [ node ] ) 
              { 
                  int  adjnode = it . first ;  
                  int  edgewt = it . second ; 
                  if ( dis + edgewt < dist [ adjnode ] ) 
                  { 
                     dist [ adjnode ] = dis + edgewt ; 
                     pq . push ( { dist [ adjnode ] , adjnode } ) ; 
                  } 
              } 
          } 
          // target=target-dist[d]+1; 
          // cout<<dist[d]<<"\n"; 
          if ( dist [ d ] < target ) 
              return   { } ; 
          if ( target == dist [ d ] ) 
          { 
              for ( auto   & i : edges ) 
              { 
                  if ( i [ 2 ] == - 1 ) 
                     i [ 2 ] = 1e9 ; 
              } 
              return  edges ; 
          } 
          for ( auto   & i : edges ) 
          { 
              if ( i [ 2 ] == - 1 ) 
                 i [ 2 ] = 1 ; 
              else 
                  continue ; 
             adj [ i [ 0 ] ] . push_back ( { i [ 1 ] , i [ 2 ] } ) ; 
             adj [ i [ 1 ] ] . push_back ( { i [ 0 ] , i [ 2 ] } ) ; 
             vector < int > dist2 ( n , 1e9 ) ; 
             priority_queue < pair < int , int > , vector < pair < int , int >> , greater < pair < int , int >> > pq ; 
             pq . push ( { 0 , s } ) ; 
             dist2 [ s ] = 0 ; 
              while ( ! pq . empty ( ) ) 
              { 
                  int  dis = pq . top ( ) . first ; 
                  int  node = pq . top ( ) . second ; 
                 pq . pop ( ) ; 
                  for ( auto  it : adj [ node ] ) 
                  { 
                      int  adjnode = it . first ;  
                      int  edgewt = it . second ; 
                      if ( dis + edgewt < dist2 [ adjnode ] ) 
                      { 
                         dist2 [ adjnode ] = dis + edgewt ; 
                         pq . push ( { dist2 [ adjnode ] , adjnode } ) ; 
                      } 
                  } 
              } 
              if ( dist2 [ d ] <= target ) 
              { 
                 i [ 2 ] = target - dist2 [ d ] + 1 ; 
                  for ( auto   & j : edges ) 
                  { 
                      if ( j [ 2 ] == - 1 ) 
                         j [ 2 ] = 1e9 ; 
                  } 
                  return  edges ; 
              } 
             
          } 
          // cout<<"min dist : "<<dist[d]<<"\n"; 
          // vector<vector<int>>ans; 
          return   { } ; 
      } 
 } ;