class   Solution   { 
 public : 
 
      int   solve ( int  i , int  prev , int  k , vector < vector < int >> & events , vector < vector < int >> & dp ) 
      { 
          if ( i >= events . size ( )   ||  k <= 0   ) 
              return   0 ; 
          if ( dp [ prev + 1 ] [ k ] != - 1 ) 
              return  dp [ prev + 1 ] [ k ] ; 
          int  pick = 0 , notpick = 0 ; 
          if ( prev == - 1   ||  events [ prev ] [ 1 ] < events [ i ] [ 0 ] ) 
             pick = solve ( i + 1 , i , k - 1 , events , dp ) + events [ i ] [ 2 ] ; 
         notpick = solve ( i + 1 , prev , k , events , dp ) ; 
          return  dp [ prev + 1 ] [ k ] = max ( pick , notpick ) ; 
      } 
      int   maxValue ( vector < vector < int >> &  events ,   int  k )   { 
         vector < vector < int >> dp ( events . size ( ) + 1 , vector < int > ( k + 1 , - 1 ) ) ; 
          sort ( events . begin ( ) , events . end ( ) ) ; 
          return   solve ( 0 , - 1 , k , events , dp ) ; 
      } 
 } ;