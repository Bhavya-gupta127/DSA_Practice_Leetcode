class   Solution   { 
 public : 
      void   dfs ( int  i , int  j , vector < vector < int >> & grid ) 
      { 
          if ( i < 0   ||  j < 0   ||  i >= grid . size ( )   ||  j >= grid [ 0 ] . size ( )   ||   ! grid [ i ] [ j ] ) 
              return ; 
         grid [ i ] [ j ] = 0 ; 
          dfs ( i + 1 , j , grid ) ; 
          dfs ( i - 1 , j , grid ) ; 
          dfs ( i , j + 1 , grid ) ; 
          dfs ( i , j - 1 , grid ) ; 
      } 
      int   numEnclaves ( vector < vector < int >> &  grid )   { 
          //there can be many approaches to solve this problem  
          //eg for all boundary land we can traverse and convert land to sea, next count all land remaining 
 
          for ( int  i = 0 ; i < max ( grid . size ( ) , grid [ 0 ] . size ( ) ) ; i ++ ) 
          { 
              dfs ( i , 0 , grid ) ; 
              dfs ( i , grid [ 0 ] . size ( ) - 1 , grid ) ; 
              dfs ( 0 , i , grid ) ; 
              dfs ( grid . size ( ) - 1 , i , grid ) ; 
          } 
          int  ans = 0 ; 
          for ( auto  i : grid ) 
          { 
              for ( auto  j : i ) 
                 ans += j ; 
          } 
         
          return  ans ; 
      } 
 } ;