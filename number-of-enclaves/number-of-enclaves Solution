class   Solution   { 
  private : 
      void   dfs ( int  i , int  j , vector < vector < int >> & vis , vector < vector < int >> & grid ) 
      { 
          if ( i >= grid . size ( )   ||  i < 0   ||  j >= grid [ 0 ] . size ( )   ||  j < 0   ||  vis [ i ] [ j ] == 0 ) 
              return   ; 
         vis [ i ] [ j ] = 0 ; 
         vector < int > delrow = { 1 , - 1 , 0 , 0 } ; 
         vector < int > delcol = { 0 , 0 , - 1 , 1 } ; 
          for ( int  x = 0 ; x < 4 ; x ++ ) 
          { 
              int  r = i + delrow [ x ] ; 
              int  c = j + delcol [ x ] ; 
              dfs ( r , c , vis , grid ) ; 
          } 
      } 
  public : 
      int   numEnclaves ( vector < vector < int >> &  grid )   { 
         vector < vector < int >> vis = grid ; 
          int  n = grid . size ( ) ; 
          int  m = grid [ 0 ] . size ( ) ; 
          //convert this problem to surrounded region problem and recurt count 
          for ( int  i = 0 ; i < n ; i ++ ) 
          { 
              dfs ( i , 0 , vis , grid ) ; 
              dfs ( i , m - 1 , vis , grid ) ; 
          } 
          for ( int  j = 0 ; j < m ; j ++ ) 
          { 
              dfs ( 0 , j , vis , grid ) ; 
              dfs ( n - 1 , j , vis , grid ) ; 
          } 
          //vis is our  
          int  ans = 0 ; 
          for ( auto  i : vis ) 
              for ( auto  j : i ) 
                 ans += j ; 
          return  ans ; 
      } 
  } ;