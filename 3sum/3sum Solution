class   Solution   { 
 public : 
     vector < vector < int >>   threeSum ( vector < int > &  nums )   { 
          //sort nums 
          //pick a element  
          //use 2 pointer in remaining vector to find sum of elements of p2 and p3 == - element at p1 
          //complexity would be n^2 
 
          sort ( nums . begin ( ) , nums . end ( ) ) ; 
         set < vector < int >> s ; 
          int  p1 , p2 , p3 ; 
          for ( p1 = 0 ; p1 < nums . size ( ) ; p1 ++ ) 
          { 
              int  target = - nums [ p1 ] ; 
             p2 = p1 + 1 ; 
             p3 = nums . size ( ) - 1 ; 
              while ( p2 < p3 ) 
              { 
                  int  ptrsum = nums [ p2 ] + nums [ p3 ] ; 
                  if ( ptrsum == target ) 
                  { 
                     s . insert ( { nums [ p1 ] , nums [ p2 ] , nums [ p3 ] } ) ; 
                     p2 ++ ; 
                  } 
                  else   if ( ptrsum < target ) 
                     p2 ++ ; 
                  else  
                     p3 -- ; 
              } 
          } 
         vector < vector < int >> ans ( s . begin ( ) , s . end ( ) ) ; 
          return  ans ; 
      } 
 } ;