class   Solution   { 
 public : 
      void   merge ( int  l , int  r , vector < int > &  nums ) 
      { 
          int  mid = ( l + r ) / 2 ; 
          int  p1 = l ; 
          int  p2 = mid + 1 ; 
 
         vector < int > temp ; 
          while ( p1 <= mid  &&  p2 <= r ) 
          { 
              if ( nums [ p1 ] < nums [ p2 ] ) 
                 temp . push_back ( nums [ p1 ++ ] ) ; 
              else 
                 temp . push_back ( nums [ p2 ++ ] ) ; 
          } 
          while ( p1 <= mid ) 
             temp . push_back ( nums [ p1 ++ ] ) ; 
          while ( p2 <= r ) 
             temp . push_back ( nums [ p2 ++ ] ) ; 
          int  j = 0 ; 
          for ( int  i = l ; i <= r ; i ++ ) 
             nums [ i ] = temp [ j ++ ] ; 
      } 
      void   mergeSort ( int  l , int  r , vector < int > &  nums ) 
      { 
          if ( l >= r ) 
              return ; 
          int  mid = ( l + r ) / 2 ; 
          mergeSort ( l , mid , nums ) ; 
          mergeSort ( mid + 1 , r , nums ) ; 
 
          merge ( l , r , nums ) ; 
      } 
     vector < int >   sortArray ( vector < int > &  nums )   { 
          mergeSort ( 0 , nums . size ( ) - 1 , nums ) ; 
          return  nums ; 
      } 
 } ;