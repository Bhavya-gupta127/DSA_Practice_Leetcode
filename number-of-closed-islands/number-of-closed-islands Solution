class   Solution   { 
 public : 
      // Method 1 accepted 
      // bool dfs(int i,int j,vector<vector<int>>&grid,vector<vector<int>>&vis,vector<vector<int>>&dp) 
      // { 
      //     if(i<0 || j<0 || i>=grid.size() || j>=grid[0].size())    
      //         return false; 
      //     if(dp[i][j]!=-1) 
      //         return dp[i][j]; 
      //     if(grid[i][j] || vis[i][j]) 
      //         return true; 
      //     vis[i][j]=1; 
      //     bool ans=true; 
      //     ans=ans&&dfs(i-1,j,grid,vis,dp); 
      //     ans=ans&&dfs(i+1,j,grid,vis,dp); 
      //     ans=ans&&dfs(i,j-1,grid,vis,dp); 
      //     ans=ans&&dfs(i,j+1,grid,vis,dp); 
      //     return dp[i][j]=ans; 
      // } 
      // int closedIsland(vector<vector<int>>& grid) { 
      //     //all zeros which are not touching boundry on traversal to other zeros 
      //     vector<vector<int>>vis(grid.size(),vector<int>(grid[0].size(),0)); 
      //     vector<vector<int>>dp(grid.size(),vector<int>(grid[0].size(),-1)); 
      //     int ans=0; 
      //     for(int i=0;i<grid.size();i++) 
      //     { 
      //         for(int j=0;j<grid[0].size();j++) 
      //         { 
      //             if(!vis[i][j] && !grid[i][j]) 
      //             { 
      //                 if(dfs(i,j,grid,vis,dp)) 
      //                 { 
      //                     cout<<i<<" "<<j<<"\n"; 
      //                     ans++; 
      //                 } 
      //             } 
      //         } 
      //     } 
      //     return ans; 
      // } 
 
      //method 2 
      // [1,1,1,1,1,1,0,0,0,1,0,0,0,0,0,0,0,1,1,1,0,0,1,1,1,1,0,0,1,0] 
      // [1,1,1,1,1,1,0,1,1,1,1,1,0,1,0,1,0,1,1,0,1,0,1,1,1,1,0,0,1,0] 
      void   dfs ( int  i , int  j , vector < vector < int >> & grid ) 
      { 
          if ( i < 0   ||  j < 0   ||  i >= grid . size ( )   ||  j >= grid [ 0 ] . size ( )   ||  grid [ i ] [ j ] ) 
              return ; 
         grid [ i ] [ j ] = 1 ; 
          dfs ( i - 1 , j , grid ) ; 
          dfs ( i + 1 , j , grid ) ; 
          dfs ( i , j - 1 , grid ) ; 
          dfs ( i , j + 1 , grid ) ; 
      } 
 
      int   closedIsland ( vector < vector < int >> &  grid )   { 
          int  n = grid . size ( ) ; 
          int  m = grid [ 0 ] . size ( ) ; 
          for ( int  i = 0 ; i < max ( n , m ) ; i ++ ) 
          { 
              dfs ( i , 0 , grid ) ; 
              dfs ( i , m - 1 , grid ) ; 
              dfs ( 0 , i , grid ) ; 
              dfs ( n - 1 , i , grid ) ; 
          } 
          int  ans = 0 ; 
          for ( int  i = 0 ; i < n ; i ++ ) 
          { 
              for ( int  j = 0 ; j < m ; j ++ ) 
              { 
                  if ( grid [ i ] [ j ] == 0 ) 
                  { 
                      dfs ( i , j , grid ) ;   // update grid at each step 
                     ans ++ ;   //number of connected components 
                  } 
              } 
          } 
          return  ans ; 
      } 
 } ;