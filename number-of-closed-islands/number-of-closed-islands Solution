class   Solution   { 
 public : 
 
      bool   dfs ( int  i , int  j , vector < vector < int >> & grid , vector < vector < int >> & vis , vector < vector < int >> & dp ) 
      { 
          if ( i < 0   ||  j < 0   ||  i >= grid . size ( )   ||  j >= grid [ 0 ] . size ( ) )    
              return   false ; 
          if ( dp [ i ] [ j ] != - 1 ) 
              return  dp [ i ] [ j ] ; 
          if ( grid [ i ] [ j ]   ||  vis [ i ] [ j ] ) 
              return   true ; 
         vis [ i ] [ j ] = 1 ; 
          bool  ans = true ; 
         ans = ans && dfs ( i - 1 , j , grid , vis , dp ) ; 
         ans = ans && dfs ( i + 1 , j , grid , vis , dp ) ; 
         ans = ans && dfs ( i , j - 1 , grid , vis , dp ) ; 
         ans = ans && dfs ( i , j + 1 , grid , vis , dp ) ; 
          return  dp [ i ] [ j ] = ans ; 
      } 
      int   closedIsland ( vector < vector < int >> &  grid )   { 
          //all zeros which are not touching boundry on traversal to other zeros 
         vector < vector < int >> vis ( grid . size ( ) , vector < int > ( grid [ 0 ] . size ( ) , 0 ) ) ; 
         vector < vector < int >> dp ( grid . size ( ) , vector < int > ( grid [ 0 ] . size ( ) , - 1 ) ) ; 
          int  ans = 0 ; 
          for ( int  i = 0 ; i < grid . size ( ) ; i ++ ) 
          { 
              for ( int  j = 0 ; j < grid [ 0 ] . size ( ) ; j ++ ) 
              { 
                  if ( ! vis [ i ] [ j ]   &&   ! grid [ i ] [ j ] ) 
                  { 
                      if ( dfs ( i , j , grid , vis , dp ) ) 
                      { 
                         cout << i << " " << j << "\n" ; 
                         ans ++ ; 
                      } 
                  } 
              } 
          } 
          return  ans ; 
      } 
 } ;