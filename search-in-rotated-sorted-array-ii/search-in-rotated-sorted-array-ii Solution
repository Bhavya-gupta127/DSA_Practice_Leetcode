class   Solution   { 
 public : 
      bool   search ( vector < int > &  nums ,   int  target )   { 
         
           
          int  low = 0 ; 
          int  n = nums . size ( ) ; 
          int  high = n - 1 ; 
          int  mid ; 
          int  max = 0 ; 
          if ( n == 1 ) 
          { 
              if ( target == nums [ 0 ] ) 
                  return   true ; 
              else 
                  return   false ; 
                 
          } 
         
         
          for ( int  i = 0 ; i < n - 1 ; i ++ ) 
          { 
              if ( nums [ i ] > nums [ i + 1 ] ) 
              { 
                 max = i ; 
                  break ; 
              } 
          } 
          if ( target >= nums [ 0 ]   &&  target <= nums [ max ] ) 
          { 
             high = max ; 
             low = 0 ; 
          } 
          else 
          { 
             low = max + 1 ; 
             high = n - 1 ; 
          } 
         
         
         
          while ( low <= high ) 
          { 
             mid = ( low + high ) / 2 ; 
              // if(nums[mid]>nums[mid+1] && nums[mid]>nums[mid-1]) 
              if ( nums [ mid ] == target ) 
              { 
                  return   true ; 
              } 
              else   if ( nums [ mid ] > target ) 
              { 
                 high = mid - 1 ; 
                  // cout<<"d"; 
              } 
              else 
              { 
                 low = mid + 1 ; 
              } 
          } 
         
         
          return   false ; 
 //         int mid; 
 //         int low=0; 
 //         int high=nums.size(); 
 //         int n=nums.size(); 
 //         int newi=-1; 
 //         int i=0; 
 //         while(nums[i]==nums[n-1]) 
 //         { 
 //             i++; 
 //         } 
 //         if(nums[n-1]<=nums[0]) 
 //         { 
 //             while(low<=high) 
 //             { 
 //                 mid=low+(high-low)/2; 
 
                 
 //                 if(nums[mid]>nums[mid+1]) 
 //                 { 
 //                     newi=mid; 
 //                     break; 
 //                 } 
 //                 else if(nums[mid]>=nums[0]) 
 //                 { 
 //                     low=mid+1; 
 //                 } 
 //                 else 
 //                 { 
 //                     high=mid-1; 
 //                 } 
 
 //                 // if(nums[mid]<=nums[0]) 
 //                 // { 
 //                 //     high=mid-1; 
 //                 //     newi=mid; 
 //                 // } 
 //                 // else 
 //                 // { 
 //                 //     low=mid+1; 
 //                 // } 
 
 //             } 
 
 //             if(target <= nums[0]) 
 //             { 
 //                 low=newi+1; 
 //                 high=nums.size(); 
 //             } 
 //             else // add a case here 
 //             { 
 //                 low=i; 
 //                 high=newi; 
 //             } 
 //         } 
         
 //         while(low<=high) 
 //         { 
 //             mid=low+(high-low)/2; 
             
 //             if(nums[mid]==target) 
 //                 return true; 
 //             else if(nums[mid]>target) 
 //             { 
 //                 high=mid-1; 
 //             } 
 //             else 
 //             { 
 //                 low=mid+1; 
 //             } 
             
 //         } 
         
         
 //         return false; 
         
      } 
 } ;