class   Solution   { 
 public : 
      void   solve ( int  i , vector < int > & candidates , int  target , set < vector < int >> & ans , vector < int > & v ) 
      { 
          if ( i >= candidates . size ( )   ||  target < 0 )     
              return ; 
          if ( target == 0 ) 
             ans . insert ( v ) ; 
          //pick and stay 
         v . push_back ( candidates [ i ] ) ; 
          solve ( i , candidates , target - candidates [ i ] , ans , v ) ; 
         v . pop_back ( ) ; 
          //notpick and go  
          solve ( i + 1 , candidates , target , ans , v ) ; 
      } 
     vector < vector < int >>   combinationSum ( vector < int > &  candidates ,   int  target )   { 
         set < vector < int >> ans ; 
         vector < int > v ; 
          sort ( candidates . begin ( ) , candidates . end ( ) ) ; 
          solve ( 0 , candidates , target , ans , v ) ; 
         vector < vector < int >> res ( ans . begin ( ) , ans . end ( ) ) ; 
          return  res ; 
      } 
 } ;