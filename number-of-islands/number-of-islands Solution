class   Solution   { 
 private :  
      void   bfs ( int  row , int  col , vector < vector < char >> &  grid , vector < vector < int >> &  vis ) 
      { 
          int  n = grid . size ( ) ; 
          int  m = grid [ 0 ] . size ( ) ; 
         vis [ row ] [ col ] = 1 ; 
         queue < pair < int , int >> q ; 
         q . push ( { row , col } ) ; 
          while ( ! q . empty ( ) ) 
          { 
              int  r = q . front ( ) . first ; 
              int  c = q . front ( ) . second ; 
             q . pop ( ) ; 
             
              for ( int  deltaR = - 1 ; deltaR <= 1 ; deltaR ++ ) 
              { 
                  int  nR = r + deltaR ; 
                  int  nC = c ; 
                  if ( nR >= 0   &&  nR < n  &&  nC >= 0   &&  nC < m  &&  vis [ nR ] [ nC ] != 1   &&  grid [ nR ] [ nC ] == '1' ) 
                  { 
                     vis [ nR ] [ nC ] = 1 ; 
                     q . push ( { nR , nC } ) ; 
                  } 
              } 
              for ( int  deltaC = - 1 ; deltaC <= 1 ; deltaC ++ ) 
              { 
                  int  nR = r ; 
                  int  nC = c + deltaC ; 
                  if ( nR >= 0   &&  nR < n  &&  nC >= 0   &&  nC < m  &&  vis [ nR ] [ nC ] != 1   &&  grid [ nR ] [ nC ] == '1' ) 
                  { 
                     vis [ nR ] [ nC ] = 1 ; 
                     q . push ( { nR , nC } ) ; 
                  } 
              } 
 
          } 
      } 
 public : 
      int   numIslands ( vector < vector < char >> &  grid )   { 
          int  n = grid . size ( ) ; 
          int  m = grid [ 0 ] . size ( ) ; 
         
         vector < vector < int >> vis ( n , vector < int > ( m , 0 ) ) ; 
          int  ans = 0 ; 
          for ( int  i = 0 ; i < n ; i ++ ) 
          { 
              for ( int  j = 0 ; j < m ; j ++ ) 
              { 
                  if ( grid [ i ] [ j ] == '1'   &&  vis [ i ] [ j ] != 1 ) 
                  { 
                     ans ++ ; 
                      bfs ( i , j , grid , vis ) ; 
                  } 
              } 
          } 
          return  ans ; 
      } 
 } ;