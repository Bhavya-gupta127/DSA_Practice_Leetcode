class   MyHashSet   { 
 public : 
     vector < bool >  ans ; 
      MyHashSet ( )   { 
         ans . resize ( 1e6 + 1 , false ) ; 
      } 
     
      void   add ( int  key )   { 
         ans [ key ] = true ; 
      } 
     
      void   remove ( int  key )   { 
         ans [ key ] = false ; 
      } 
     
      bool   contains ( int  key )   { 
          return  ans [ key ] ; 
      } 
     
     
     
 //       vector<int> vec; 
     
 //     MyHashSet() { 
         
 //     } 
     
 //     void add(int key) { 
 //         for(int i=0;i<vec.size();i++) 
 //         { 
 //             if(vec[i]==key) 
 //             { 
 //                 return; 
 //             } 
 //         } 
 //         vec.push_back(key); 
 //         return ; 
         
 //     } 
     
 //     void remove(int key) { 
         
 //         for(int i=0;i<vec.size();i++) 
 //         { 
 //             if(vec[i]==key) 
 //             { 
 //                 vec.erase(vec.begin() + i); 
 //                 return; 
 //             } 
 //         } 
 //         return ; 
 //     } 
     
 //     bool contains(int key) { 
         
 //         for(int i=0;i<vec.size();i++) 
 //         { 
 //             if(vec[i]==key) 
 //             { 
 //                 return true ; 
 //             } 
 //         } 
 //         return false; 
 //     } 
 } ; 
 
 /**
  * Your MyHashSet object will be instantiated and called as such:
  * MyHashSet* obj = new MyHashSet();
  * obj->add(key);
  * obj->remove(key);
  * bool param_3 = obj->contains(key);
  */